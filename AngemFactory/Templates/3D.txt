        public static readonly $TYPE$
            Zero = new $TYPE$(0, 0, 0),
            Forward = new $TYPE$(0, -1, 0),
            Back = new $TYPE$(0, 1, 0),
            Right = new $TYPE$(1, 0, 0),
            Left = new $TYPE$(-1, 0, 0),
            Up = new $TYPE$(0, 0, 1),
            Down = new $TYPE$(0, 0, -1);
            
        public readonly $T$ X, Y, Z;
        public readonly $T$ Area;
        
        public $TYPE$($T$ x, $T$ y, $T$ z)
        {
            X = x;
            Y = y;
            Z = z;
            Area = X * Y;
        }
        
        public static $TYPE$ operator +($TYPE$ v1, $TYPE$ v2)
        {
            return new $TYPE$(
                v1.X + v2.X,
                v1.Y + v2.Y,
                v1.Z + v2.Z);
        }
 
        public static bool operator <($TYPE$ v, $TYPE$ size)
        {
            return v.X < size.X && v.Y < size.Y && v.Z < size.Z;
        }
 
        public static bool operator <=($TYPE$ v, $TYPE$ size)
        {
            return v.X <= size.X && v.Y <= size.Y && v.Z <= size.Z;
        }
        
$CONVERSIONS$
 
        public override string ToString() => $"{{{X}; {Y}; {Z}}}";
 
        public static bool operator ==($TYPE$ v, $TYPE$ u) => v.X == u.X && v.Y == u.Y && v.Z == u.Z;
 
        public override int GetHashCode()
        {
            unchecked
            {
                return ((X.GetHashCode() * 397) ^ Y.GetHashCode() * 397) ^ Z.GetHashCode();
            }
        }