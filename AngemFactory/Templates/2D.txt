        public static readonly $TYPE$
            Zero = new $TYPE$(0, 0),
            Forward = new $TYPE$(0, -1),
            Back = new $TYPE$(0, 1),
            Right = new $TYPE$(1, 0),
            Left = new $TYPE$(-1, 0);
            
        public readonly $T$ X, Y;
        public readonly $T$ Area;
        
        public $TYPE$($T$ x, $T$ y)
        {
            X = x;
            Y = y;
            Area = X * Y;
        }
        
        public static $TYPE$ operator +($TYPE$ v1, $TYPE$ v2)
        {
            return new $TYPE$(
                v1.X + v2.X,
                v1.Y + v2.Y);
        }
        
        public static $TYPE$ operator -($TYPE$ v1, $TYPE$ v2)
        {
            return new $TYPE$(
                v1.X - v2.X,
                v1.Y - v2.Y);
        }
        
        public static $TYPE$ operator -($TYPE$ v)
        {
            return new $TYPE$(-v.X, -v.Y);
        }
        
        public static $T$ operator *($TYPE$ v1, $TYPE$ v2)
        {
            return v1.X * v2.X + v1.Y * v2.Y;
        }
        
        public static $TYPE$ operator *($T$ k, $TYPE$ v)
        {
            return new $TYPE$(k * v.X, k * v.Y);
        }
 
        public static bool operator <($TYPE$ v, $TYPE$ size)
        {
            return v.X < size.X && v.Y < size.Y;
        }
 
        public static bool operator <=($TYPE$ v, $TYPE$ size)
        {
            return v.X <= size.X && v.Y <= size.Y;
        }
 
        public static bool operator <($TYPE$ v, $T$3 size)
        {
            return v.X < size.X && v.Y < size.Y;
        }
 
        public static bool operator <=($TYPE$ v, $T$3 size)
        {
            return v.X <= size.X && v.Y <= size.Y;
        }
 
        public static bool operator >($TYPE$ v, $T$3 size) => !(v <= size)
 
        public static bool operator >=($TYPE$ v, $T$3 size) => !(v < size);
        
        public static implicit operator $T$3($TYPE$ original) => new $T$3(original.X, original.Y, 0);
        
$CONVERSIONS$
 
        public override string ToString() => $"{{{X:F}; {Y:F} }}";
 
        public static bool operator ==($TYPE$ v, $TYPE$ u) => v.X == u.X && v.Y == u.Y;
 
        public override int GetHashCode()
        {
            unchecked
            {
                return (X.GetHashCode() * 397) ^ Y.GetHashCode();
            }
        }
        
        public $TYPE$ Rotated(double degrees)
        {
            var angle = degrees / 180 * Math.PI;
            double sin = Math.Sin(angle), cos = Math.Cos(angle);
            return new $TYPE$(
                ($T$) (X * cos - Y * sin),
                ($T$) (X * sin + Y * cos));
        }
        
        public IEnumerable<$TYPE$> Range()
        {
            for (var y = 0; y < Y; y++)
            for (var x = 0; x < X; x++)
                yield return new $TYPE$(x, y);
        }